from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db import connection
from medical_analysis.models import AnalysisSession, MedicalData, SecurityLog
import os
import psutil


class Command(BaseCommand):
    help = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Medical MVP"))
        self.stdout.write("=" * 50)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.show_database_stats()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.show_file_stats()

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        self.show_system_performance()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.show_security_stats()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.check_services_health()

    def show_database_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write("\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")

        total_users = AnalysisSession.objects.values("user").distinct().count()
        total_sessions = AnalysisSession.objects.count()
        completed_sessions = AnalysisSession.objects.filter(processing_status="completed").count()
        failed_sessions = AnalysisSession.objects.filter(processing_status="error").count()
        active_sessions = AnalysisSession.objects.filter(processing_status__in=["uploading", "processing"]).count()

        total_analyses = MedicalData.objects.count()

        self.stdout.write(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        self.stdout.write(f"  üìã –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}")
        self.stdout.write(f"  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_sessions}")
        self.stdout.write(f"  ‚ùå –û—à–∏–±–æ–∫: {failed_sessions}")
        self.stdout.write(f"  ‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_sessions}")
        self.stdout.write(f"  üî¨ –ê–Ω–∞–ª–∏–∑–æ–≤: {total_analyses}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            self.stdout.write("  üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK")
        except Exception as e:
            self.stdout.write(f"  üî¥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: ERROR - {e}")

    def show_file_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        self.stdout.write("\nüìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:")

        from django.conf import settings

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        temp_dir = settings.TEMP_UPLOAD_DIR
        media_dir = settings.MEDIA_ROOT

        if os.path.exists(temp_dir):
            temp_files = len([f for f in os.listdir(temp_dir) if os.path.isfile(os.path.join(temp_dir, f))])
            self.stdout.write(f"  üìÇ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {temp_files}")
        else:
            self.stdout.write("  üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp_uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if os.path.exists(media_dir):
            media_files = len([f for f in os.listdir(media_dir) if os.path.isfile(os.path.join(media_dir, f))])
            self.stdout.write(f"  üñºÔ∏è  –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {media_files}")
        else:
            self.stdout.write("  üñºÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è media –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
        orphaned_sessions = AnalysisSession.objects.filter(
            temp_file_path__isnull=False,
            temp_file_path__gt="",
            file_deleted_timestamp__isnull=True,
            upload_timestamp__lt=timezone.now() - timezone.timedelta(minutes=2),
        ).count()

        if orphaned_sessions > 0:
            self.stdout.write(f"  ‚ö†Ô∏è  –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {orphaned_sessions}")
        else:
            self.stdout.write("  üü¢ –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: 0")

    def show_system_performance(self):
        """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        self.stdout.write("\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")

        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            self.stdout.write(f"  üñ•Ô∏è  CPU: {cpu_percent}%")

            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_used = memory.used / (1024**3)  # GB
            memory_total = memory.total / (1024**3)  # GB
            self.stdout.write(f"  üíæ RAM: {memory_percent}% ({memory_used:.1f}/{memory_total:.1f} GB)")

            # –î–∏—Å–∫
            disk = psutil.disk_usage("/")
            disk_percent = disk.percent
            disk_free = disk.free / (1024**3)  # GB
            self.stdout.write(f"  üíø –î–∏—Å–∫: {disk_percent}% (—Å–≤–æ–±–æ–¥–Ω–æ: {disk_free:.1f} GB)")

        except ImportError:
            self.stdout.write("  ‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def show_security_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.stdout.write("\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")

        # –õ–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        recent_logs = SecurityLog.objects.filter(timestamp__gte=timezone.now() - timezone.timedelta(hours=24))

        total_recent_logs = recent_logs.count()
        failed_logins = recent_logs.filter(action="USER_LOGIN_FAILED").count()
        file_accesses = recent_logs.filter(action="DATA_ACCESS").count()
        file_uploads = recent_logs.filter(action="FILE_UPLOADED").count()

        self.stdout.write(f"  üìù –°–æ–±—ã—Ç–∏–π –∑–∞ 24—á: {total_recent_logs}")
        self.stdout.write(f"  üîë –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: {failed_logins}")
        self.stdout.write(f"  üìä –î–æ—Å—Ç—É–ø–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º: {file_accesses}")
        self.stdout.write(f"  üì§ –ó–∞–≥—Ä—É–∑–æ–∫ —Ñ–∞–π–ª–æ–≤: {file_uploads}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if failed_logins > 10:
            self.stdout.write("  üö® –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤!")

        # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
        undeleted_files = AnalysisSession.objects.filter(
            temp_file_path__isnull=False, temp_file_path__gt="", file_deleted_timestamp__isnull=True
        ).count()

        if undeleted_files == 0:
            self.stdout.write("  üü¢ –í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ")
        else:
            self.stdout.write(f"  ‚ö†Ô∏è  –ù–µ—É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {undeleted_files}")

    def check_services_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.stdout.write("\nüè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤:")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        try:
            from django_redis import get_redis_connection

            redis_conn = get_redis_connection("default")
            redis_conn.ping()
            self.stdout.write("  üü¢ Redis: OK")
        except Exception as e:
            self.stdout.write(f"  üî¥ Redis: ERROR - {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery —á–µ—Ä–µ–∑ RabbitMQ
        try:
            from celery import Celery
            from medical_mvp.settings import CELERY_BROKER_URL

            temp_app = Celery()
            temp_app.conf.broker_url = CELERY_BROKER_URL
            temp_app.conf.broker_connection_timeout = 2

            inspect = temp_app.control.inspect(timeout=2)
            stats = inspect.stats()

            if stats:
                active_workers = len(stats)
                self.stdout.write(f"  üü¢ Celery: OK ({active_workers} workers)")
            else:
                self.stdout.write("  üî¥ Celery: No active workers")
        except Exception as e:
            self.stdout.write(f"  üî¥ Celery: ERROR - {str(e)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract
        try:
            import subprocess

            result = subprocess.run(["tesseract", "--version"], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                version = result.stdout.split("\n")[0]
                self.stdout.write(f"  üü¢ Tesseract: OK ({version})")
            else:
                self.stdout.write("  üî¥ Tesseract: ERROR")
        except Exception as e:
            self.stdout.write(f"  üî¥ Tesseract: ERROR - {e}")
