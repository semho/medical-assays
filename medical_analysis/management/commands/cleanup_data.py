from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from medical_analysis.models import AnalysisSession, SecurityLog
from medical_analysis.file_processor import DataRetentionManager


class Command(BaseCommand):
    help = "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"

    def add_arguments(self, parser):
        parser.add_argument(
            "--expired-files",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
        )
        parser.add_argument(
            "--old-logs",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)",
        )
        parser.add_argument(
            "--failed-sessions",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏",
        )
        parser.add_argument(
            "--all",
            action="store_true",
            help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—é –æ—á–∏—Å—Ç–∫—É",
        )
        parser.add_argument(
            "--days",
            type=int,
            default=90,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        )

    def handle(self, *args, **options):
        if options["all"]:
            options["expired_files"] = True
            options["old_logs"] = True
            options["failed_sessions"] = True

        if options["expired_files"]:
            self.cleanup_expired_files()

        if options["old_logs"]:
            self.cleanup_old_logs(options["days"])

        if options["failed_sessions"]:
            self.cleanup_failed_sessions()

        self.stdout.write(self.style.SUCCESS("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))

    def cleanup_expired_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.stdout.write("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

        try:
            DataRetentionManager.cleanup_expired_sessions()
            DataRetentionManager.verify_file_deletion()

            self.stdout.write(self.style.SUCCESS("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}"))

    def cleanup_old_logs(self, days):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        self.stdout.write(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")

        try:
            cutoff_date = timezone.now() - timedelta(days=days)
            deleted_count = SecurityLog.objects.filter(timestamp__lt=cutoff_date).delete()[0]

            self.stdout.write(self.style.SUCCESS(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}"))

    def cleanup_failed_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        self.stdout.write("üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")

        try:
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            cutoff_date = timezone.now() - timedelta(days=7)
            failed_sessions = AnalysisSession.objects.filter(
                processing_status="error", upload_timestamp__lt=cutoff_date
            )

            deleted_count = failed_sessions.count()
            failed_sessions.delete()

            self.stdout.write(self.style.SUCCESS(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}"))
