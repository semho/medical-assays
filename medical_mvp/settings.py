"""Django settings for medical_mvp project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import config
from kombu import Queue

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ENV = config("ENV", default="loc")
DEBUG = config("DEBUG", default=False, cast=bool)
LOCAL_DEBUG = config("LOCAL_DEBUGGER_RUN", default=False, cast=bool)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="loc")

ALLOWED_HOSTS = [
    "0.0.0.0",
    "127.0.0.1",
    "localhost",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "medical_analysis",
    "rest_framework",
    # "corsheaders",
    "celery",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "medical_mvp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "medical_mvp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("POSTGRES_DB", default="db_django"),
        "USER": config("POSTGRES_USER", default="myroot"),
        "PASSWORD": config("POSTGRES_PASSWORD", default="password"),
        "HOST": ("localhost" if LOCAL_DEBUG else "postgres-medical"),
        "PORT": "5432",
        "TEST": {
            "NAME": "test_db_django",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ru"

TIME_ZONE = "Europe/Moscow"

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ("ru", "Русский"),
    ("en", "English"),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"] if LOCAL_DEBUG else []

# Media files (временные)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
TEMP_UPLOAD_DIR = BASE_DIR / "temp_uploads"

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
ALLOWED_FILE_EXTENSIONS = [".pdf", ".jpg", ".jpeg", ".png", ".tiff"]

# Настройки безопасности для медицинских данных
ENCRYPTION_KEY_LENGTH = 32  # AES-256
FILE_RETENTION_SECONDS = 60  # Удаление через 60 секунд
MAX_PROCESSING_TIME = 300  # 5 минут максимум на обработку

# OCR Settings
TESSERACT_CMD = "/usr/bin/tesseract"  # Путь к tesseract
OCR_LANGUAGES = ["rus", "eng"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Redis
REDIS_HOST = "localhost" if LOCAL_DEBUG else "redis"
REDIS_PORT = 6379
REDIS_PASSWORD = config("REDIS_PASSWORD", default="loc_redis")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_PASSWORD,
        },
    }
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "colored",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs" / "app_errors.log",
            "formatter": "detailed",
            "level": "ERROR",
            "maxBytes": 10485760,  # 10 MB
            "backupCount": 5,  # Хранить до 5 файлов
        },
        "celery_console": {
            "class": "logging.StreamHandler",
            "formatter": "detailed",
            "level": "INFO",
        },
    },
    "formatters": {
        "colored": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s%(levelname)s:%(name)s:%(message)s",
            "log_colors": {
                "DEBUG": "cyan",
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "red,bg_white",
            },
        },
        "detailed": {
            "format": "%(asctime)s %(name)s %(levelname)s %(message)s",
        },
    },
    "loggers": {
        "urllib3": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "selenium": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "medical_analysis": {
            "handlers": ["celery_console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "security": {
            "handlers": ["celery_console"],
            "level": "INFO",
            "propagate": False,
        },
        # Celery логгеры
        "celery": {
            "handlers": ["celery_console"],
            "level": "INFO",
            "propagate": False,
        },
        "celery.worker": {
            "handlers": ["celery_console"],
            "level": "INFO",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "DEBUG",
    },
}

(BASE_DIR / "logs").mkdir(exist_ok=True, parents=True)

# Rabbit
RABBITMQ_HOST = os.environ.get("RABBITMQ_HOST", "rabbitmq-medical" if ENV == "loc" else "rabbitmq")
RABBITMQ_PORT = int(os.environ.get("RABBITMQ_PORT", 5672))
RABBITMQ_DEFAULT_USER = os.environ.get("RABBITMQ_DEFAULT_USER", "user")
RABBITMQ_DEFAULT_PASS = os.environ.get("RABBITMQ_DEFAULT_PASS", "pass")

RABBITMQ_BASE_URL = f"amqp://{RABBITMQ_DEFAULT_USER}:{RABBITMQ_DEFAULT_PASS}@{RABBITMQ_HOST}:{RABBITMQ_PORT:d}"
CELERY_BROKER_URL = RABBITMQ_BASE_URL

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"

CELERY_DEFAULT_QUEUE = "default"
CELERY_DEFAULT_EXCHANGE = "default"
CELERY_DEFAULT_ROUTING_KEY = "default"

CELERY_QUEUES = [
    Queue(celery_queue)
    for celery_queue in [
        "default",
        "celery",
    ]
]

CELERY_TASK_ALWAYS_EAGER = False
CELERY_ACKS_LATE = True
CELERY_TASK_PUBLISH_RETRY = True
CELERY_DISABLE_RATE_LIMITS = False
CELERY_TIMEZONE = "Europe/Moscow"
CELERY_IGNORE_RESULT = True

# GPT
OPENAI_API_KEY = config("OPENAI_API_KEY", default="")
OPENAI_MODEL = "gpt-4o-mini"
GPT_MAX_INPUT_TOKENS = 8000  # Запас для медицинских документов
GPT_MAX_OUTPUT_TOKENS = 2000  # Достаточно для 30+ параметров
GPT_TEMPERATURE = 0.1  # Низкая температура для точности
